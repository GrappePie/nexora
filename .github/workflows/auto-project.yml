name: Auto add issues to Project and sync fields

on:
  issues:
    types: [opened, edited, labeled, unlabeled, reopened]

# Permisos válidos para este workflow:
permissions:
  contents: read
  issues: write

env:
  PROJECT_OWNER: GrappePie        # <-- cámbialo si es org o usuario distinto
  PROJECT_NUMBER: "1"             # <-- número del Project (el que ves en la URL)

jobs:
  sync-project:
    runs-on: ubuntu-latest
    steps:
      - name: Sync issue to Project and fields
        uses: actions/github-script@v7
        with:
          script: |
            const owner = process.env.PROJECT_OWNER;
            const projectNumber = parseInt(process.env.PROJECT_NUMBER, 10);
            const issue = context.payload.issue;

            if (!issue || !issue.number) {
              core.info("No issue in payload. Exiting.");
              return;
            }

            // 1) Obtener ID del Project (user u organization)
            const projRes = await github.graphql(`
              query($owner:String!, $projectNumber:Int!) {
                user(login: $owner)   { projectV2(number: $projectNumber) { id } }
                organization(login:$owner){ projectV2(number: $projectNumber) { id } }
              }
            `, { owner, projectNumber });

            const projectId =
              projRes.user?.projectV2?.id || projRes.organization?.projectV2?.id;

            if (!projectId) {
              core.setFailed(\`No se encontró ProjectV2 \${owner} #\${projectNumber}\`);
              return;
            }

            // 2) Node id del issue
            const { data: issueData } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number
            });
            const issueNodeId = issueData.node_id;

            // 3) ¿Ya está en el Project? Listar items y buscar por content.id
            const itemsRes = await github.graphql(`
              query($projectId:ID!) {
                node(id:$projectId) {
                  ... on ProjectV2 {
                    items(first: 200) {
                      nodes {
                        id
                        content { __typename ... on Issue { id number title } }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            let itemId = null;
            for (const n of (itemsRes?.node?.items?.nodes || [])) {
              if (n.content?.__typename === "Issue" && n.content.id === issueNodeId) {
                itemId = n.id;
                break;
              }
            }

            // 4) Agregar si falta (idempotente)
            if (!itemId) {
              const addRes = await github.graphql(`
                mutation($projectId:ID!, $contentId:ID!) {
                  addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                    item { id }
                  }
                }
              `, { projectId, contentId: issueNodeId });
              itemId = addRes?.addProjectV2ItemById?.item?.id;
              core.info(\`Item agregado: \${itemId}\`);
            } else {
              core.info(\`Item ya existía: \${itemId}\`);
            }
            if (!itemId) {
              core.setFailed("No se pudo obtener/crear itemId.");
              return;
            }

            // 5) Obtener campos Priority/Type/Area
            const fieldsRes = await github.graphql(`
              query($projectId:ID!) {
                node(id:$projectId) {
                  ... on ProjectV2 {
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2SingleSelectField { id name options { id name } }
                        ... on ProjectV2FieldCommon      { id name }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const fieldNodes = fieldsRes?.node?.fields?.nodes || [];
            const findSelect = (n) => fieldNodes.find(f => f.options && f.name?.toLowerCase() === n.toLowerCase());
            const priorityField = findSelect("Priority");
            const typeField     = findSelect("Type");
            const areaField     = findSelect("Area");

            // 6) Mapear labels -> opciones
            const labels = (issue.labels || []).map(l => (typeof l === "string" ? l : l.name)).filter(Boolean).map(s => s.toLowerCase());
            const optId = (field, name) => field?.options?.find(o => o.name?.toLowerCase() === name)?.id || null;

            let prioId = null;
            for (const p of ["priority:high","priority:medium","priority:low"]) {
              if (labels.includes(p)) { prioId = optId(priorityField, p.split(":")[1]); break; }
            }

            let typeId = null;
            for (const t of ["type:epic","type:story","type:task"]) {
              if (labels.includes(t)) { typeId = optId(typeField, t.split(":")[1]); break; }
            }

            const areaNames = new Set((areaField?.options || []).map(o => o.name.toLowerCase()));
            const areaLabel = labels.find(l => areaNames.has(l));
            const areaId = areaLabel ? optId(areaField, areaLabel) : null;

            // 7) Aplicar valores (si hay campo + opción)
            async function setSelect(field, optionId) {
              if (!field || !optionId) return;
              await github.graphql(`
                mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!) {
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$projectId,
                    itemId:$itemId,
                    fieldId:$fieldId,
                    value:{ singleSelectOptionId:$optionId }
                  }) { clientMutationId }
                }
              `, { projectId, itemId, fieldId: field.id, optionId });
            }

            await setSelect(priorityField, prioId);
            await setSelect(typeField,     typeId);
            await setSelect(areaField,     areaId);

            core.info("Sincronizado OK");
