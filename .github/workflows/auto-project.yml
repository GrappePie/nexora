name: Auto add issues to Project and sync fields

on:
  issues:
    types: [opened, edited, labeled, unlabeled, reopened, closed]
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Issue a re-sincronizar manualmente"
        required: true
        type: number

permissions:
  contents: read
  issues: write

env:
  PROJECT_OWNER: GrappePie
  PROJECT_NUMBER: "1"

jobs:
  sync-project:
    runs-on: ubuntu-latest
    steps:
      - name: Sync issue to Project and fields
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}   # PAT classic con scopes: repo, project
          script: |
            function low(s){ return (s || "").toString().toLowerCase(); }
            function notNull(x){ return x !== null && x !== undefined; }

            const owner = process.env.PROJECT_OWNER;
            const projectNumber = parseInt(process.env.PROJECT_NUMBER, 10);

            const isManual = context.eventName === "workflow_dispatch";
            const manualIssue = isManual ? Number(core.getInput("issue_number")) : null;
            const issueNumber = isManual ? manualIssue : (context.payload.issue ? context.payload.issue.number : null);
            if (!issueNumber) { core.info("No issue number"); return; }

            async function getUserProjectId(login, number){
              const q = "query($login:String!, $n:Int!){ user(login:$login){ projectV2(number:$n){ id } } }";
              const r = await github.graphql(q, { login, n: number });
              return r && r.user && r.user.projectV2 ? r.user.projectV2.id : null;
            }
            async function getOrgProjectId(login, number){
              const q = "query($login:String!, $n:Int!){ organization(login:$login){ projectV2(number:$n){ id } } }";
              const r = await github.graphql(q, { login, n: number });
              return r && r.organization && r.organization.projectV2 ? r.organization.projectV2.id : null;
            }

            let projectId = await getUserProjectId(owner, projectNumber);
            if (!projectId) { projectId = await getOrgProjectId(owner, projectNumber); }
            if (!projectId) { core.setFailed("ProjectV2 no encontrado para " + owner + " #" + projectNumber); return; }

            const issueView = await github.rest.issues.get({
              owner: context.repo.owner, repo: context.repo.repo, issue_number: issueNumber
            });
            const issueNodeId = issueView.data && issueView.data.node_id ? issueView.data.node_id : null;
            if (!issueNodeId) { core.setFailed("No se pudo resolver issue node_id"); return; }

            async function listAllIssueItems(projectId){
              let hasNext = true, cursor = null;
              const rows = [];
              while (hasNext) {
                const q = "query($pid:ID!, $after:String){ node(id:$pid){ ... on ProjectV2 { items(first:100, after:$after){ pageInfo{ hasNextPage endCursor } nodes{ id content{ __typename ... on Issue { id number } } } } } } }";
                const r = await github.graphql(q, { pid: projectId, after: cursor });
                const items = (((r || {}).node || {}).items || {});
                const nodes = items.nodes || [];
                for (const n of nodes) {
                  if (n && n.content && n.content.__typename === "Issue" && n.content.id) {
                    rows.push({ itemId: n.id, contentId: n.content.id, number: n.content.number });
                  }
                }
                hasNext = items.pageInfo && items.pageInfo.hasNextPage ? true : false;
                cursor = items.pageInfo ? items.pageInfo.endCursor : null;
              }
              return rows;
            }

            const all = await listAllIssueItems(projectId);
            let found = all.find(x => x.contentId === issueNodeId);
            let itemId = found ? found.itemId : null;

            if (!itemId) {
              const addRes = await github.graphql(
                "mutation($projectId:ID!, $contentId:ID!){ addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}){ item{ id } } }",
                { projectId, contentId: issueNodeId }
              );
              itemId = addRes && addRes.addProjectV2ItemById && addRes.addProjectV2ItemById.item ? addRes.addProjectV2ItemById.item.id : null;
              core.info("Item agregado: " + itemId);
            } else {
              core.info("Item ya existia: " + itemId);
            }
            if (!itemId) { core.setFailed("No se pudo obtener itemId"); return; }

            // -------- FIX: consulta correcta de campos (solo fragmentos sobre el union) --------
            const fieldsRes = await github.graphql(
              "query($pid:ID!){ node(id:$pid){ ... on ProjectV2 { fields(first:50){ nodes{ __typename " +
              "... on ProjectV2SingleSelectField { id name options { id name } } " +
              "... on ProjectV2FieldCommon { id name } " +
              "} } } } }",
              { pid: projectId }
            );
            const fieldNodes = ((((fieldsRes || {}).node || {}).fields || {}).nodes || []).filter(notNull);

            function byName(name){
              const tgt = low(name);
              for (const f of fieldNodes) { if (f && f.name && low(f.name) === tgt) return f; }
              return null;
            }
            // Single-selects que nos interesan
            const priorityField = byName("Priority") && fieldNodes.find(f => f.name && low(f.name) === "priority" && f.options);
            const typeField     = byName("Type")     && fieldNodes.find(f => f.name && low(f.name) === "type"     && f.options);
            const areaField     = byName("Area")     && fieldNodes.find(f => f.name && low(f.name) === "area"     && f.options);

            const labels = (issueView.data.labels || []).map(l => {
              if (typeof l === "string") return low(l);
              if (l && l.name) return low(l.name);
              return null;
            }).filter(notNull);

            function optionIdByName(field, nameLower){
              if (!field || !field.options) return null;
              for (const o of field.options) { if (o && o.name && low(o.name) === nameLower) return o.id; }
              return null;
            }

            let prioId = null;
            for (const p of ["priority:high","priority:medium","priority:low"]) {
              if (labels.indexOf(p) !== -1) { prioId = optionIdByName(priorityField, p.split(":")[1]); break; }
            }

            let typeId = null;
            for (const t of ["type:epic","type:story","type:task"]) {
              if (labels.indexOf(t) !== -1) { typeId = optionIdByName(typeField, t.split(":")[1]); break; }
            }

            let areaId = null;
            if (areaField && areaField.options) {
              for (const o of areaField.options) {
                if (labels.indexOf(low(o.name)) !== -1) { areaId = o.id; break; }
              }
            }

            async function setSingleSelect(field, optId){
              if (!field || !optId) return;
              await github.graphql(
                "mutation($pid:ID!, $iid:ID!, $fid:ID!, $opt:String!){ updateProjectV2ItemFieldValue(input:{ projectId:$pid, itemId:$iid, fieldId:$fid, value:{ singleSelectOptionId:$opt } }){ clientMutationId } }",
                { pid: projectId, iid: itemId, fid: field.id, opt: optId }
              );
            }

            await setSingleSelect(priorityField, prioId);
            await setSingleSelect(typeField,     typeId);
            await setSingleSelect(areaField,     areaId);

            // Status => Done al cerrar (si tu Status es single-select y tiene "Done")
            const wasClosed = !isManual && context.payload.action === "closed";
            if (wasClosed) {
              const statusField = byName("Status") && fieldNodes.find(f => f.name && low(f.name) === "status" && f.options);
              if (statusField && statusField.options) {
                const doneOpt = statusField.options.find(o => o && o.name && low(o.name) === "done");
                if (doneOpt) {
                  await setSingleSelect(statusField, doneOpt.id);
                  core.info("Status => Done");
                }
              }
            }

            core.info("Sync OK para issue #" + issueNumber);
